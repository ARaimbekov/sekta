// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: vacancies.proto

package vacancies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VacanciesClient is the client API for Vacancies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VacanciesClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type vacanciesClient struct {
	cc grpc.ClientConnInterface
}

func NewVacanciesClient(cc grpc.ClientConnInterface) VacanciesClient {
	return &vacanciesClient{cc}
}

func (c *vacanciesClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/order.Vacancies/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacanciesClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/order.Vacancies/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacanciesClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/order.Vacancies/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacanciesClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/order.Vacancies/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VacanciesServer is the server API for Vacancies service.
// All implementations must embed UnimplementedVacanciesServer
// for forward compatibility
type VacanciesServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
}

// UnimplementedVacanciesServer must be embedded to have forward compatible implementations.
type UnimplementedVacanciesServer struct {
}

func (UnimplementedVacanciesServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVacanciesServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedVacanciesServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVacanciesServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVacanciesServer) mustEmbedUnimplementedVacanciesServer() {}

// UnsafeVacanciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VacanciesServer will
// result in compilation errors.
type UnsafeVacanciesServer interface {
	mustEmbedUnimplementedVacanciesServer()
}

func RegisterVacanciesServer(s grpc.ServiceRegistrar, srv VacanciesServer) {
	s.RegisterService(&Vacancies_ServiceDesc, srv)
}

func _Vacancies_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacanciesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Vacancies/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacanciesServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vacancies_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacanciesServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Vacancies/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacanciesServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vacancies_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacanciesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Vacancies/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacanciesServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vacancies_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacanciesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.Vacancies/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacanciesServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vacancies_ServiceDesc is the grpc.ServiceDesc for Vacancies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vacancies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.Vacancies",
	HandlerType: (*VacanciesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Vacancies_List_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Vacancies_Search_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Vacancies_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Vacancies_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vacancies.proto",
}
